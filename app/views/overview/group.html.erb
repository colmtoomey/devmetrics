

<div id="container">

<h1>Weighted Severity Trend</h1>



<h2>Overview Chart</h2>

<div id="chart">
    <span id="menu" style="float: right; margin: 10px 10px"><i class="fa fa-bars"></i></span>
    <h3 style="text-align: center;">Weighted Severity Chart</h3>
</div>

<h2>Data</h2>
 
<% if !@weeks.blank? %>
<table>
  <tr>
    <th>Date</th>
    <th>Created</th>
    <th>Fixed</th>
    <th>Closed</th>
    <th>WSI</th>
  </tr>
 
<% @weeks.reverse_each do |w| %>
  <tr id="data-table-<%= w.day %>">
    <td><%= w.created %></td>
    <td><%= w.fixed %></td>
    <td><%= w.closed %></td>
    <td><%= w.wsi %></td>
  </tr>
<% end %>
</table>

<% end %>
 
<br>

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js" charset="utf-8"></script>
<script>

	var data=<%= @weeks.to_json(:only => [:day, :created, :fixed, :closed, :wsi ]).html_safe %>

  var margin = {top: 20, right: 20, bottom: 70, left: 140},
    width = 960 - margin.left - margin.right,
    height = 300 - margin.top - margin.bottom;

  if (null==data || 0==data.length) {

    var svg=d3.select("#chart").append("div")
      .attr("id","test")
      .attr("class","error")
      .style("width", ""+width + margin.left + margin.right)
      .style("height", ""+height + margin.top + margin.bottom)
      .insert("p")
      .html("<i class='fa fa-exclamation-triangle'></i> no data");
   
  } else {


// space between bars
var padding=2;

// Parse the date / time
var	parseDate=d3.time.format("%Y-%m-%d").parse;

var formatTime=d3.time.format("%Y-%m-%d");

// set up the scales
var x=d3.scale.ordinal().rangeRoundBands([0, width], .05);

var groupScale=d3.scale.ordinal(); // was x1 - for a group of bars

var y=d3.scale.linear().range([height, 0]);

var xAxis=d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .tickFormat(d3.time.format("%d %b"));

// .ticks(d3.time.days,7)
// .tickPadding(8)

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10);

// excel - http://peltiertech.com/using-colors-in-excel/
//var color = d3.scale.ordinal().range(["#C0504D", "#F79646", "#9BBB59" ]);

// colorbrewer2.org
var color=d3.scale.ordinal().range([ "#fc8d59", "#ffffbf", "#91cf60" ]);

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", 
      "translate(" + margin.left + "," + margin.top + ")");

var tooltip=d3.select("#chart")
  .append("div")
  .attr("class","tooltip")
  .style("position","absolute")
  .style("z-index","10")
  .style("visibility","hidden")
  .style("background","#FFFFA4")
  .style("color","black")
  .style("border","1px solid black")
  .style("padding","5px")
  .text("a simple tooltip");

// see this - very nice
// http://metricsgraphicsjs.org/

//d3.csv("bar-data.csv", function(error, data) {


// CT: trying to figure this out
  var fields=[ "created", "fixed", "closed" ];

    data.forEach(function(d) {
    	d.date=parseDate(d.day);
    	d.value=+d.created;
      d.fixed=+d.fixed;
      d.closed=+d.closed;
    	d.wsi=+d.wsi;

      d.items=[ { name: "created", value: +d.created }, { name: "fixed", value: +d.fixed }, { name: "closed", value: +d.closed } ];

    });
	
  x.domain(data.map(function(d) { return d.date; }));
  groupScale.domain(fields).rangeRoundBands([0,x.rangeBand()],0.05);
  y.domain([0, d3.max(data, function(d) { return d.wsi; })]);

  //alert(d3.max(data, function(d) { return d.created; }));

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .selectAll("text")
      .style("text-anchor", "end")
      .attr("transform","rotate(-45)");
      
      //.attr("dx", "-.8em")
      //.attr("dy", "-.55em")
      //.attr("transform", "rotate(-45)" );


  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Weighted Severity");

  // create "holder" group for the bars
  var theGroup=svg.selectAll("group")
      .data(data)
    .enter().append("g")
      .style("fill", "#C9C9FC")
      .attr("class","week")
      .attr("id",function(d) { return "#data-table-"+formatTime(d.date) })
      .attr("transform", function(d) { return "translate("+x(d.date)+",0)"; })
      // add attrs
      .attr("x", function(d) { return 0; })
      .attr("y", function(d) { return 0; })
      .attr("width", x.rangeBand())
      .attr("height", function(d) { return height; })
      // and behaviour
      .on('mouseover', function(d){

        /*var nodeSelection=d3.select(this).style({opacity:'0.8'});
        nodeSelection.select("text").style({opacity:'1.0'});

        d3.select(this).style({background: 'red'});
        d3.select(this).attr("fill","#00ff00");

        nodeSelection.append("rect")
          .style("fill", "#C9C9FC")
          .attr("x",0)
          .attr("y",0)
          .attr("width",x.rangeBand())
          .attr("height", height)
          .attr("opacity","0.1");*/

        //console.log(d);

        // highlight row in associated data table
        var tag="#data-table-"+formatTime(d.date);
        var rowSelection=d3.selectAll(tag+" td");
        rowSelection.style({background: "red"});


        tooltip.style("visibility","visible");
        //tooltip.style("top",(d3.event.pageY-10+"px")).style("left",(d3.event.pageX+10)+"px");

        tooltip.html("<h3>Week starting "+formatTime(d.date)+"</h3><table class='tooltip'>"
          +"<tr><td class='legend' style='color: "+color(0)+"'>&#x25a0;</td><td>created: </td><td>"+d.created+"</td></tr>"
          +"<tr><td style='color: "+color(1)+"'>&#x25a0;</td><td>fixed: </td><td>"+d.fixed+"</td></tr>"
          +"<tr><td style='color: "+color(2)+"'>&#x25a0;</td><td>closed: </td><td>"+d.closed+"</td></tr>"
          +"<tr><td></td><td>WSI: </td><td>"+d.wsi+"</td></tr></table>");

      })
      .on('mouseout', function(d){
        //d3.select(this).style({opacity:'1.0',})
        //d3.select("text").style({opacity:'1.0'});

        // unhighlight row in associated data table
      var tag="#data-table-"+formatTime(d.date);
      var rowSelection=d3.selectAll(tag+" td");
      rowSelection.style({background: "#ffffff"});

      tooltip.style("visibility","hidden");
    })
      .on("mousemove", function(d) {
        tooltip.style("top",(d3.event.pageY+10+"px")).style("left",(d3.event.pageX+x.rangeBand())+"px");
      });

// count all "bar" children of the group, and if there are fewer elements than items in "data" create as many as needed to get to 5


  // will have same number of 'bar' children as there are items in d.items
  theGroup.selectAll("bar")
      .data(function(d) { return d.items; })  // get the bar data - array of {name, value} pairs
    .enter().append("rect")
      .style("fill", function(d) { return color(d.name); })
      .attr("stroke","#6B6BEE")
      // next line needs to be a scale that returns 1..3 (for 3 grouped bars) -> pixel
      .attr("x", function(d) { return groupScale(d.name); })
      //.attr("y", function(d) { return y(d.value); })
      .attr("y", height )
      .attr("width", groupScale.rangeBand())
      .attr("height", 0)
      //.attr("height", function(d) { return height - y(d.value); })
      .transition()
      //.delay(function (d,i){ return i * 100;})
      .duration(300)
      .attr("y", function(d) { return y(d.value); })  // visual "bottom" of bar
      .attr("height", function(d) { return height-y(d.value); }); // visual "top" of bar

  // add labels to bars 

  /*svg.selectAll("bar")
      .data(data)
    .enter().append("text")
      .text(function(d) { return (d.value); })
      .attr("x", function(d) { return x(d.date)+x.rangeBand()/2; })
      .attr("y", function(d) { return y(d.value)+15; })
      .attr("text-anchor","middle")
      .attr("font-family", "sans-serif")
   		.attr("font-size", "11px")
   		.attr("fill", "white");*/

   // add the wsi line

   var wsiLine=d3.svg.line()
   	.x(function(d) {
   		return(x(d.date)+x.rangeBand()/2);
   })
   	.y(function(d) {
   		return(y(d.wsi));
   	});

   d3.select("svg")
   	.append("path")
   	.attr("d", wsiLine(data))
   	.attr("fill","none")
   	.attr("stroke","darkred")
   	.attr("stroke-width",2)
   	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");


// TODO: try adding JUST ONE background rect to each one of the groups created above - this works and tooltip starts working too ... see above and think about it
// add id for this svg object and ensure it gets highlighted

  theGroup.selectAll("bucket")
  .data([1]).enter()
    .append("rect")
          .style("fill", "#ffffff")
          .style("opacity","0.0")
          .attr("x",0)
          .attr("y",0)
          .attr("width",x.rangeBand())
          .attr("height", height)
          .on('mouseover', function(d){
            d3.select(this).style("fill","#00ff00");
            d3.select(this).style("opacity","0.2");
          })
          .on('mouseout', function(d) {
            d3.select(this).style("fill","#ffffff");
            d3.select(this).style("opacity","0.0");
          });

      }



</script>
